
import React from 'react';
import { Chapter, AssetType, BaseAsset } from '../types';
import AssetEditor from './AssetEditor';
import { PROMPTS, SYSTEM_PROMPTS } from '../constants';
import { EMPTY_EBOOK_STRUCTURE_SUMMARY } from '../constants'; 

interface ChapterAssetsPhaseProps {
  chapters: Chapter[];
  assetType: AssetType;
  phaseTitle: string;
  onGenerate: (
    assetId: string,
    chapterId: string,
    assetType: AssetType,
    chapterContext: { title: string, summary?: string, rawContent: string, concept?: string },
    prompts: { system?: string; user: string }
  ) => Promise<void>;
  onApprove: (assetId: string, chapterId: string, assetType: AssetType) => void;
  onUpload: (assetId: string, chapterId: string, assetType: AssetType, file: File) => void;
  onClear: (assetId: string, chapterId: string, assetType: AssetType) => void;
  isGeminiKeyAvailable: boolean;
}

const ChapterAssetsPhase: React.FC<ChapterAssetsPhaseProps> = ({
  chapters,
  assetType,
  phaseTitle,
  onGenerate,
  onApprove,
  onUpload,
  onClear,
  isGeminiKeyAvailable,
}) => {

  const getAssetForChapter = (chapter: Chapter): BaseAsset => {
    return chapter[assetType as keyof Omit<Chapter, 'id' | 'title' | 'rawContent' | 'contentSummary'>] as BaseAsset;
  };

  const isTextAssetType = (type: AssetType): boolean => {
    // motivationalQuote is purely text.
    // interactiveElement, diagram, chartInfographic generate text descriptions first, then optionally an image from that.
    // So, for the purpose of the 'isTextAsset' prop in AssetEditor (which influences layout/preview slightly),
    // we can consider these as primarily text-generating for their main content, even if an image is derived.
    // The AssetEditor itself handles displaying an image URL if present, regardless of this prop.
    return type === 'motivationalQuote' || type === 'interactiveElement' || type === 'diagram' || type === 'chartInfographic';
  };

  const getInitialPrompts = (chapter: Chapter, currentAssetType: AssetType): { system: string, user: string } => {
    let userPrompt = '';
    let systemPrompt = '';
    const placeholderSummary = chapter.contentSummary || EMPTY_EBOOK_STRUCTURE_SUMMARY;


    switch (currentAssetType) {
      case 'backgroundImage':
        userPrompt = PROMPTS.backgroundImage(chapter.title, placeholderSummary); 
        systemPrompt = SYSTEM_PROMPTS.backgroundImage();
        break;
      case 'interactiveElement':
        userPrompt = PROMPTS.interactiveElementDesc(chapter.title, placeholderSummary); 
        systemPrompt = SYSTEM_PROMPTS.interactiveElementDesc();
        break;
      case 'diagram':
        userPrompt = PROMPTS.diagramDesc(chapter.title, placeholderSummary); 
        systemPrompt = SYSTEM_PROMPTS.diagramDesc();
        break;
      case 'chartInfographic':
        userPrompt = PROMPTS.chartInfographicDesc(chapter.title, placeholderSummary); 
        systemPrompt = SYSTEM_PROMPTS.chartInfographicDesc();
        break;
      case 'motivationalQuote':
        userPrompt = PROMPTS.motivationalQuote(chapter.title, placeholderSummary); 
        systemPrompt = SYSTEM_PROMPTS.motivationalQuote();
        break;
      default:
        userPrompt = "Default user prompt - asset type not configured.";
        systemPrompt = "Default system prompt - asset type not configured.";
    }
    return { system: systemPrompt, user: userPrompt };
  };


  return (
    <div className="space-y-8">
      <p className="text-slate-300 leading-relaxed">
        Now, let's create assets for each chapter. Customize the AI's role and specific instructions for each. The AI will use chapter-specific details. Chapter summaries for prompts are generated by AI on demand.
      </p>
      {chapters.length === 0 && <p className="text-slate-400">No chapters found. Please complete the document input phase.</p>}

      {chapters.map((chapter, index) => {
        const asset = getAssetForChapter(chapter);
        if (!asset) {
          console.warn(`Asset of type ${assetType} not found for chapter ${chapter.id}`);
          return <div key={chapter.id} className="text-red-300 p-4 bg-red-700/20 rounded-md">Error: Asset data missing for chapter "{chapter.title}".</div>;
        }

        const assetId = asset.id;
        const { system: initialSystemPrompt, user: initialUserPrompt } = getInitialPrompts(chapter, assetType);

        const handleGenerateWithPrompts = (prompts: { system?: string; user: string }) => {
          const context = {
              title: chapter.title,
              summary: chapter.contentSummary, 
              rawContent: chapter.rawContent, 
              // 'concept' was used for diagramDesc but now uses chapterSummary/rawContent like others.
              // For consistency, we can pass rawContent as 'concept' if a specific asset type needs more focused input.
              // For now, rawContent is available if a prompt template needs it.
              concept: chapter.rawContent 
          };
          return onGenerate(assetId, chapter.id, assetType, context, prompts);
        };

        const handleApprove = () => {
          onApprove(assetId, chapter.id, assetType);
        };

        const handleUpload = (file: File) => {
          onUpload(assetId, chapter.id, assetType, file);
        };

        const handleClearAsset = () => {
          onClear(assetId, chapter.id, assetType);
        };

        const assetDisplayName = assetType.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());

        return (
          <div key={chapter.id} className="p-4 sm:p-6 bg-slate-700/80 rounded-xl shadow-2xl">
            <h3 className="text-xl sm:text-2xl font-semibold mb-1 text-sky-400">Chapter {index + 1}: {chapter.title}</h3>
            <div className="mb-4 p-3 bg-slate-600/70 rounded-lg shadow-inner">
                <h4 className="text-sm font-medium text-sky-200 mb-1">Chapter Initial Summary (Reference):</h4>
                <p className="text-xs text-slate-300 italic max-h-24 overflow-y-auto ">{chapter.contentSummary || "No summary available."}</p>
                 <p className="text-xs text-slate-400 mt-1">(Full content is used by AI for more detailed prompts when generating)</p>
            </div>
            <AssetEditor
              asset={asset}
              assetType={assetType}
              assetName={assetDisplayName}
              initialSystemPrompt={initialSystemPrompt}
              initialUserPrompt={initialUserPrompt}
              onGenerate={handleGenerateWithPrompts}
              onApprove={handleApprove}
              onUpload={handleUpload}
              onClear={handleClearAsset}
              isTextAsset={isTextAssetType(assetType)}
              isGeminiKeyAvailable={isGeminiKeyAvailable}
            />
          </div>
        );
      })}
    </div>
  );
};

export default ChapterAssetsPhase;
